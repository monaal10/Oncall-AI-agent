[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "oncall-ai-agent"
dynamic = ["version"]
description = "AI-powered incident resolution for DevOps teams"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
authors = [
    { name = "Monaal", email = "monaal@example.com" },
]
keywords = [
    "devops",
    "incident-management",
    "ai",
    "monitoring",
    "automation",
    "oncall",
    "sre",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.2.0",
    "httpx>=0.25.0",
    "click>=8.1.0",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.2",
]

[project.optional-dependencies]
# Cloud providers
aws = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
]
gcp = [
    "google-cloud-logging>=3.8.0",
    "google-cloud-monitoring>=2.16.0",
]
azure = [
    "azure-monitor-query>=1.2.0",
    "azure-identity>=1.15.0",
]

# Code repositories
github = [
    "PyGithub>=2.1.1",
]
gitlab = [
    "python-gitlab>=4.2.0",
]

# LLM providers
openai = [
    "openai>=1.6.0",
]
anthropic = [
    "anthropic>=0.8.0",
]
ollama = [
    "ollama>=0.1.7",
]
huggingface = [
    "transformers>=4.36.0",
    "torch>=2.1.0",
]

# Runbook parsers
pdf = [
    "PyPDF2>=3.0.1",
    "pdfplumber>=0.10.0",
]
docx = [
    "python-docx>=1.1.0",
]
confluence = [
    "atlassian-python-api>=3.41.0",
]
web = [
    "beautifulsoup4>=4.12.0",
    "requests>=2.31.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

# All optional dependencies
all = [
    "oncall-ai-agent[aws,gcp,azure,github,gitlab,openai,anthropic,ollama,huggingface,pdf,docx,confluence,web]",
]

[project.urls]
Homepage = "https://github.com/monaal/oncall-ai-agent"
Documentation = "https://github.com/monaal/oncall-ai-agent/tree/main/docs"
Repository = "https://github.com/monaal/oncall-ai-agent"
Issues = "https://github.com/monaal/oncall-ai-agent/issues"
Changelog = "https://github.com/monaal/oncall-ai-agent/blob/main/CHANGELOG.md"

[project.scripts]
oncall-agent = "oncall_agent.cli.main:main"

[tool.hatch.version]
path = "oncall_agent/__version__.py"

[tool.hatch.build.targets.wheel]
packages = ["oncall_agent"]

[tool.hatch.build.targets.sdist]
include = [
    "/oncall_agent",
    "/api",
    "/examples",
    "/docs",
    "/tests",
    "/scripts",
    "/requirements",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["oncall_agent", "api"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=oncall_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "github.*",
    "openai.*",
    "anthropic.*",
    "ollama.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["oncall_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
